[
  {
    "title": "Fabric Animate",
    "author": "William Do",
    "previewDescription": "The team has included an open source animation utility to Fabric JS. This gives developers the ability to add animations to their elements in Javascript.",
    "monthPublished": "OCT",
    "dayPublished": "17",
    "yearPublished": "2016",
    "fullPublishedDate": "October 17, 2016",
    "content": "<p>The team has included an open source animation utility to Fabric JS. This gives developers the ability to add animations to their elements in Javascript.</p>\n<p>Fabric Animate can: </p>\n<ul style=\"list-style-type: disc; margin-left: 18px;\">\n  <li>set transitions</li>\n  <li>add keyframe animations</li>\n  <li>animate scrolling</li>\n</ul>\n<p>Fabric Animate’s animation and transition methods leverage CSS to animate your elements. Scrolling uses pure JavaScript to add animation to scrolling.\n</p>\n<p>While this may not be a shortcut for simple animations e.g. motion between states, this would be great for more complex motion or motion that depends on dynamic values, such as a width or a height set to auto or situations where you don’t know beforehand where you need an element to animate to. In fact, we use the Fabric Animate in the Office UI Fabric JavaScript Persona Component to expand the height of the details depending on the content within the detail.</p>\n<p>Below is a rough guideline of situations where you’d use Fabric Animate vs write your own CSS.</p>\n<p>Use Fabric Animate:</p>\n<ul style=\"list-style-type: disc; margin-left: 18px;\">\n  <li>When you have dynamic values that you can’t hard code</li>\n  <li>To add callbacks when transitions, animations, and scrolling are completed\n</li>\n  <li>Animated scrolling</li>\n</ul>\n<p>Use Regular CSS:</p>\n<ul style=\"list-style-type: disc; margin-left: 18px;\">\n  <li>Simple animations that show state</li>\n  <li>When you know beforehand where an element will transition to</li>\n  <li>If you’re using a tool that can output CSS for complex animations</li>\n  <li>You're a keyframe wizard</li>\n</ul>\n<h2>Transition Method</h2>\n<br>\n<p><code style=\"background-color: #ddd; padding: 5px; font-family: monospace;\">transition(element, props) </code></p>\n<p>The transition method creates a CSS transition for an element. You can define a transition with several properties. Primarily you’ll need an element, and properties such as duration and top, left, opacity, etc...</p>\n<p>In the example below the square is animating 100 pixels to the left utilizing a cubic ease out for the timing function.</p>\n<div style=\"width: 360px;\">\n  <iframe width=\"100%\" height=\"280\" src=\"//jsfiddle.net/bascoptle1868/8opcdt1d/embedded/result,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>*Note that a starting value must be set in CSS or Javascript for the element to have a starting point to animate from.\n</div>\n<br>\n<p>Below properties are combined with the addition of a callback when the transition ends.</p>\n<div style=\"width: 360px;\">\n<iframe width=\"100%\" height=\"280\" src=\"//jsfiddle.net/bascoptle1868/3wopf249/embedded/result,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n  <p>*Note that transforms are overwritten for an element whenenever a new transition is created for that element.</p>\n</div>\n<br>\n<p>Below a saturation filter is animated on an element.</p>\n<div style=\"width: 360px;\">\n<iframe width=\"100%\" height=\"380\" src=\"//jsfiddle.net/bascoptle1868/04khf9ou/4/embedded/result,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n  <p>*Note CSS filters aren't available in Internet Explorer.</p>\n</div>\n<br>\n<p>Randomized falling particles below:</p>\n<div style=\"width: 360px\">\n<iframe width=\"100%\" height=\"340\" src=\"//jsfiddle.net/bascoptle1868/r0zpw57u/embedded/result,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n</div>\n<br>\n<h2>Animation Method</h2>\n<br>\n<p>\n  <code style=\"background-color: #ddd; padding: 5px; font-family: monospace;\">animation(element, keyFramesId, props) </code></p>\n<p>The animation method allows you to attach a keyframe animation to an element and assign a duration and a callback.</p>\n<div style=\"width: 360px;\">\n<iframe width=\"100%\" height=\"250\" src=\"//jsfiddle.net/bascoptle1868/on2ojjx5/4/embedded/result,js,css\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n</div>\n<br>\n<h2>ScrollTo Method</h2>\n<br>\n<p>\n  <code style=\"background-color: #ddd; padding: 5px; font-family: monospace;\">scrollTo(element, props) </code>\n</p>\n<p>ScrollTo will animate an element to a scroll position. You can optionally assign a callback when the scroll is complete. For now there’s only one ease that’s baked into the functionality.\n</p>\n<div style=\"width: 380px;\">\n<iframe width=\"100%\" height=\"400\" src=\"//jsfiddle.net/bascoptle1868/bu2b47fp/5/embedded/result,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n</div>\n<br>\n<h2>Fabric Ease</h2>\n<br>\n<p>Additionally we've included a few timing functions to use in transitions and animations. ScrollTo has a baked in ease for now, since it's driven by Javascript.</p>\n<p>The eases are static properties of the Ease object:</p>\n<p>\n  <code style=\"background-color: #ddd; padding: 5px; font-family: monospace;\">fabric.Ease.QUAD_EASE_OUT;</code>\n</p>\n<br>\n<p>Available Eases:</p>\n<ul>\n  <li>QUAD_EASE_IN</li>\n  <li>CUBIC_EASE_IN</li>\n  <li>QUART_EASE_IN</li>\n  <li>QUINT_EASE_IN</li>\n  <li>SINE_EASE_IN</li>\n  <li>EXPO_EASE_IN</li>\n  <li>CIRC_EASE_IN</li>\n  <li>BACK_EASE_IN</li>\n  <li>QUAD_EASE_OUT</li>\n  <li>CUBIC_EASE_OUT</li>\n  <li>QUART_EASE_OUT</li>\n  <li>QUINT_EASE_OUT</li>\n  <li>SINE_EASE_OUT</li>\n  <li>EXPO_EASE_OUT</li>\n  <li>CIRC_EASE_OUT</li>\n  <li>BACK_EASE_OUT</li>\n  <li>QUAD_EASE_IN_OUT</li>\n  <li>CUBIC_EASE_IN_OUT</li>\n  <li>QUART_EASE_IN_OUT</li>\n  <li>QUINT_EASE_IN_OUT</li>\n  <li>SINE_EASE_IN_OUT</li>\n  <li>EXPO_EASE_IN_OUT</li>\n  <li>CIRC_EASE_IN_OUT</li>\n  <li>BACK_EASE_IN_OUT</li>\n</ul>\n<div style=\"width: 360px\">\n  <iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bascoptle1868/bc240L0b/5/embedded/result,js\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n</div>\n\n"
  },
  {
    "title": "The evolution of Fabric's components",
    "author": "Eric Thompson",
    "previewDescription": "As developers, we know that you use a variety of tools to build the next great app or Office Add-in. That's why we've created Office UI Fabric React, a new component set built for the React framework. The existing components, which include significant recent updates...",
    "monthPublished": "JUL",
    "dayPublished": "27",
    "yearPublished": "2016",
    "fullPublishedDate": "July 27th, 2016",
    "content": "<p>As developers, we know that you use a variety of tools to build the next great app or Office Add-in. That's why we've created <a href=\"https://github.com/OfficeDev/office-ui-fabric-react\">Office UI Fabric React</a>, a new component set built for the React framework. The existing components, which include significant recent updates, are moving to their own repository as Office UI Fabric JS. Given this move, we will be renaming the existing project – our colors, icons, typography, grid, etc. – to <a href=\"https://github.com/OfficeDev/office-ui-fabric\">Office UI Fabric Core.</a> You will see these changes, including a link to Office UI Fabric JS, in the coming weeks.</p>\n\n<p>Office UI Fabric Core will continue to be the common source of styles utilized by projects that deliver the Office / Office 365 Design Language. This includes our own component sets, as well as community-driven projects like <a href=\"http://ngofficeuifabric.com/\">ngOfficeUIFabric</a>. These all serve as options for our community and ecosystem to leverage as they create Office Add-ins, apps, and SharePoint experiences.</p>\n\n<p>If you've been following the Office UI Fabric project, you're aware of the work that's been going into our <a href=\"https://github.com/OfficeDev/office-ui-fabric/releases/tag/3.0.0-beta2\">3.0.0 betas.</a> We've improved the quality of our components through architectural changes (e.g. Handlebars, TypeScript) and principle changes (e.g. no dependency on jQuery). The betas helped us explore the evolution of our JavaScript story and see how we could make components easier for you to use, without taking a dependency on a framework. This work will be in the Office UI Fabric JS repository for use and development going forward.</p>\n\n<p>While pursuing this, we’ve been working with engineers across Microsoft on Office UI Fabric React. We've built the entire Fabric component set (and more) in React, with more functionality and higher quality. Engineers from across the company are building these components and they are already in use in some products. This effort has resulted in more accessible, maintainable, and easier to document components. We’re excited to make these available to you for use in your own projects. Although this project is in a pre-v1 state, there are already more components with more capabilities than we've ever delivered. We're already leveraging these in our products, such as the <a href=\"https://blogs.office.com/2016/05/04/the-future-of-sharepoint/\">new, modern SharePoint experiences</a>.</p>\n\n<p>This is the latest step in our quest to bring you the best toolkit for building experiences for Office and Office 365. Please check out the <a href=\"https://github.com/OfficeDev/office-ui-fabric-react\">Office UI Fabric React</a> project and let us know what you think. You can look forward to visual refreshes, new components, additional icons, and other frequently-requested features arriving over the coming months as we continue to share what we use to build Office with you.</p>"
  },
  {
    "title": "Fabric 3.0 is now in beta",
    "author": "Eric Thompson",
    "previewDescription": "We're thrilled to announce the beta release of Fabric 3.0! We don't typically do betas, but with this being our largest release since 1.0 we want to be sure that everyone has a chance to try it out and provide feedback before the big launch. No big surprises.",
    "monthPublished": "JUN",
    "dayPublished": "13",
    "yearPublished": "2016",
    "fullPublishedDate": "June 13th, 2016",
    "content": "\n      <p>We're thrilled to announce the beta release of Fabric 3.0! We don't typically do betas, but with this being our largest release since 1.0 we want to be sure that everyone has a chance to try it out and provide feedback before the big launch. No big surprises.</p>\n      <p>In this post you'll find an overview of the changes coming in Fabric 3.0 and beyond. As usual, the final release notes will contain full details of the changes. We also plan to update our component documentation with instructions on upgrading, where applicable.</p>\n      <p>If you're ready to dive in you can <a href=\"https://github.com/OfficeDev/office-ui-fabric/releases/tag/3.0.0-beta\">download the beta release</a> and post any questions you have or bugs you uncover to our <a href=\"https://github.com/OfficeDev/Office-UI-Fabric/issues\">GitHub issues list</a>.</p>\n      <h2>What's new in 3.0?</h2>\n      <h3>Handlebars templates</h3>\n      <p>The HTML that we provide for each component is now generated using <a href=\"http://handlebarsjs.com/\">Handlebars</a> templates. This has allowed us to cut down on code that was redundant between variants of a component, and to properly embed components within each other. See <a href=\"https://github.com/OfficeDev/office-ui-fabric/pull/527\">this pull request</a> for full details on how we're using Handlebars.</p>\n      <p>If you're unfamiliar with Handlebars, there's no need to worry. We're still providing plain HTML for the components and there is no need to add Handlebars or any other dependency to your project. You'll benefit from the reduction of bugs and the faster speed at which we can develop, without losing the convenience of simply copy-pasting the HTML directly into your project.</p>\n      <h3>New and updated components</h3>\n      <p>Creating Handlebars templates for the components gave us an opportunity to revisit each component and reconsider how we had structured them. The end result is that many of our components have received small tweaks, and a couple have been completely rewritten for increased flexibility and code reuse.</p>\n      <p>The biggest change is that NavBar has been merged into CommandBar. The difference between these two was always confusing, and we heard your confusion and desire for a single bar that could do both navigation and commanding. We've delivered. The updated CommandBar makes use of a new button, CommandButton, that supports both types of actions side-by-side in the same bar. You'll find it much easier to work with.</p>\n      <p>We've also addressed some of the largest accessibility problems by adding keyboard navigation and high contrast support to many of the components. This is work that we'll be continuing in Fabric 3.1 and beyond as we aim to make sure everyone can use the components and benefit from your app or add-in, regardless of ability.</p>\n      <h3>Production-quality JavaScript</h3>\n      <p>The JavaScript that comes with Fabric's components has always been a bit confusing. While our original intention was simply to demonstrate the components' styles and states, largely by toggling classes in response to basic click events, this wasn't communicated clearly. As a result, many of you added the JavaScript to your production apps and were disappointed to find it full of bugs, missing essential features, and difficult to extend. Adding even more confusion, the JavaScript contained a mix of useful component features and code that was intended only to demonstrate the component.</p>\n      <p>We heard your concerns and have started replacing all of the components' JavaScript with useful, production-quality code. We're removing the dependency on jQuery so that your app or add-in can remain as lean as possible. And behind the scenes, all of the JavaScript is being written in <a href=\"http://www.typescriptlang.org/\">TypeScript</a>. This allows us to write more stable, reliable code that you can feel confident using.</p>\n      <p>As we add features we'll be opening up standard, well-documented APIs for interacting with the components. You'll rarely need to manipulate the DOM directly as you do today. We're open to requests for how you'd like to manipulate the components at runtime, so please file an issue on GitHub to let us know how you're using them.</p>\n      <p>Note that currently the DatePicker still has a dependency on jQuery and its <a href=\"http://amsul.ca/pickadate.js/\">pickadate.js</a> plugin. We plan to remove this and write a full TypeScript implementation in a future release.</p>\n      <h3>Bug fixes, documentation, and build improvements</h3>\n      <p>About a dozen long-standing bugs have been fixed, along with many more that were discovered during a three day bug bash and previously unreported. So while we have more work to do here to bring the bug count down, and expect to find new issues before the release, you'll find that the quality has improved overall. We're getting there.</p>\n      <p>The main repo now includes a <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a> file for every component, which will be pulled directly into <a href=\"http://dev.office.com/fabric\">our website</a>. By placing documentation alongside the code, we can be sure that whenever something changes the documentation is updated to reflect that change. This will help us to avoid outdated documentation and inconsistencies as we continue to build Fabric. We're also reducing the barrier for our community to contribute to documentation and for our internal designers to get more involved.</p>\n      <p>The build system now includes <a href=\"https://en.wikipedia.org/wiki/Lint_%28software%29\">linting</a> to enforce our style rules for Sass and TypeScript. This will improve the consistency and quality of our code and makes it easier for you to contribute pull requests, without those dreaded comments asking for small changes to spacing or style.</p>\n      <h2>Release schedule</h2>\n      <h3>General release of 3.0</h3>\n      <p>While we haven't set an exact release date, we expect to launch within the <strong>first week of July</strong> provided that no major ship-blocking bugs are discovered. We need your help to test the beta and report any issues that you find, so that we can get them resolved and be ready to ship on time.</p>\n      <h3>Minor releases (Fabric 3.x)</h3>\n      <p>For our upcoming minor releases (Fabric 3.1, 3.2, and so on) we plan to return to our regular schedule of releasing every two weeks. With so many changes being made in 3.0 we expect our first releases to focus on bug fixes and other quality improvements. We'll be improving the accessibility of components by adding support for keyboard navigation, high contrast styles, and screen readers. We will also be working with our design team to provide more detailed documentation for each component, including usage guidance so that you can make informed decisions while designing your apps and add-ins.</p>\n      <h3>Fabric 4.0</h3>\n      <p>Work is already underway on Fabric 4.0, with an entirely new set of icons and improvements to the components' visual design. We're not anticipating any functional changes here; it will primarily be a visual refresh. You can view this work by keeping an eye on the <a href=\"https://github.com/OfficeDev/office-ui-fabric/tree/beta/mdl2\">‘beta/mdl2' branch</a> of the repo.</p>\n"
  },
  {
    "title": "Office UI Fabric for iOS",
    "author": "Andrey Cherkashin",
    "previewDescription": "We're thrilled to announce the release of Office UI Fabric for iOS. This is the first time we've brought the Office Design Language to a new platform. While it's not yet as full-featured as our web toolkit, this initial release includes core styles to lay the foundation: colors, typography, and simple components.",
    "monthPublished": "MAR",
    "dayPublished": 28,
    "yearPublished": 2016,
    "fullPublishedDate": "March 28th, 2016",
    "content": "<p>We're thrilled to announce the release of <a href=\"https://github.com/OfficeDev/Office-UI-Fabric-iOS\">Office UI Fabric for iOS</a>. This is the first time we've brought the Office Design Language to a new platform. While it's not yet as full-featured as our web toolkit, this initial release includes core styles to lay the foundation: colors, typography, and simple components.</p>\n\n        <h2>Typography</h2>\n        <p>The type ramp is the same as we use on the web.</p>\n        <img src=\" https://static2.sharepointonline.com/files/fabric/images/iOS-typography.png\" class=\"docs-BlogPost-image\" width=\"325\" height=\"500\" alt=\"Type sizes available in Fabric\">\n        <p>Note: The screenshot does not include all of the sizes available.</p>\n \n        <h2>Colors</h2>\n        <p>We've started with the core palette of theme, neutral, and accent colors that you'll find in Fabric for Web. In additional, we've included a hashing algorithm that returns a color for any given string.</p> \n        <img src=\" https://static2.sharepointonline.com/files/fabric/images/iOS-colors.png\" class=\"docs-BlogPost-image\" width=\"975\" height=\"500\" alt=\"Colors available in Fabric\">    \n\n        <h2>Components</h2>\n        <p>Two simple components, InitialsView and LogoView, are included. These can be used to represent people, groups, or sites.</p>\n        <img src=\" https://static2.sharepointonline.com/files/fabric/images/iOS-components.png\" class=\"docs-BlogPost-image\" width=\"725\" height=\"300\" alt=\"Components available in Fabric\">   \n\n        <h2>Ready to start?</h2>\n        <p>Swing by <a href=\"https://github.com/OfficeDev/Office-UI-Fabric-iOS\">the repository</a> to check out the readme and code. We'll be rolling out controls that leverage these assets in the future, so check back for more updates!</p>\n"
  },
  {
    "title": "Rolling out the red carpet",
    "author": "Eric Thompson",
    "previewDescription": "We're thrilled to announce the release of Office UI Fabric for iOS. This is the first time we've brought the Office Design Language to a new platform. While it's not yet as full-featured as our web toolkit, this initial release includes core styles to lay the foundation: colors, typography, and simple components.",
    "monthPublished": "MAR",
    "dayPublished": "28",
    "yearPublished": "2016",
    "fullPublishedDate": "March 28th, 2016",
    "content": "<p>Welcome to the official Office UI Fabric blog! Here you can expect to see posts about new releases, documentation updates, partner projects, flame war inducing discussions (jk), and more. We're excited to have a place to talk more deeply about what we're working on and some of the nuances of the project.</p>\n        <p>The first blog post is also a great place for us to announce that we'll be at the <a href=\"http://build.microsoft.com/\">Microsoft Build Developer Conference</a>! If you're planning to attend, swing by the Moscone Center lobby and say hi to a few of the team members. We'll be giving a presentation about the toolkit and helping out with the Labs and the Garage.</p>\n        <p>We're excited to share our latest work, so stay tuned for more updates!</p>"
  }
]